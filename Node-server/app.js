const express = require('express');
const logger = require('morgan');
const path = require('path');
const admin = require("firebase-admin");
const bodyParser = require("body-parser");
const middlew = require("express-firebase-middleware");
const models = require("./models");

//Initializing Firebase-admin SDK
var serviceAccount = require('./sanskrut-interns-firebase-adminsdk-jm6gx-128ac628dc.json');

var firebaseAdmin = admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://sanskrut-interns.firebaseio.com"
});

var firedb = firebaseAdmin.database();

const app = express();
app.use(express.static(path.join(__dirname, 'views')));
app.use(logger('dev'));
app.use(bodyParser.urlencoded({ extended: true }));
app.set('view engine', 'ejs');


//
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Authorization, Access-Control-Request-Method, Access-Control-Request-Headers');
    res.header('Access-Control-Allow-Methods', 'OPTIONS, GET, POST, PUT, DELETE');
    if ('OPTIONS' === req.method) {
        res.sendStatus(200);
    } else {
        console.log(`${req.ip} ${req.method} ${req.url}`);
        next();
    }
});

app.use(express.json());


//Adding authorization to particular routes
app.use('/createroom', middlew.auth);
app.use('/joinroom', middlew.auth);
app.use('/setUser', middlew.auth);


app.post('/setUser', (req, res) => {
    const uid = req.body.uid;
    const username = req.body.name;
    // console.log(uid, username);
    let ref = firedb.ref('Users');
    ref.once('value', snapshot => {
        // console.log(snapshot.val())
        let data = snapshot.val();
        if(data==null || !data[uid]){
            ref.child(uid).set({
                name : username,
                gameplay : 0,
                wins : 0
            })
            res.send(true)
        } else {
            res.send(false)
        }
    })
})


app.get('/createroom', (req, res) => {

    //Generating a random 7-digit number as game-room token
    var roomToken = models.randRoom()
    //Initializing particular node reference in firebase
    var roomRef = firedb.ref('/rooms');
    //Fetching idToken generated by firebase after login from the authorization header
    var idToken = req.header("Authorization");
    if (idToken == undefined) {
        console.log("no header recieved")
        return null
    }
    idToken = idToken.substr(7, idToken.length);

    //Using firebaseAdmin to verfiy itToken fetched from frontend
    firebaseAdmin.auth().verifyIdToken(idToken).then((decodedToken) => {
        //After verification, decoding the idToken
        let uid = decodedToken.uid;
        firebaseAdmin.auth().getUser(uid)
            .then(function (userRecord) {
                //New player with roomToken set in db with this function
                // models.newRoomCreate(userRecord, roomRef, firedb, roomToken);
                var currentUser = userRecord.displayName;
                //Creating a branch in firebase for new rooms
                roomRef.child('room_' + roomToken)
                    .set({ roomid: roomToken, tempCounter: 2 })
                    .then(function () {
                        console.log("roomToken add to db");
                        res.send({ room_token: roomToken });
                    })
                    .catch(function (err) {
                        console.log(err);
                        res.send(false);
                    });

                var roomRef1 = firedb.ref('/rooms/room_' + roomToken + '/players');
                roomRef1.child('player_1').set({ name: currentUser, position: -1 })
                    .then(function () {
                        console.log('Player 1 name set')
                    })
                    .catch(function (err) {
                        console.log(err);
                    });
            })
            .catch(function (error) {
                //check for error
                console.log('Error fetching user data:', error);
            });

    }).catch(function (error) {
        console.log(error);
    });

});

app.post('/joinroom', function(req, res){

    var roomToken = req.body.enterid;
    var username = req.body.entername;

    var ref = firedb.ref('/rooms/room_'+roomToken);

    ref.once('value', function(snapshot){

        var count = snapshot.child('tempCounter');
        var countVal = count.val();

        var roomRef = firedb.ref('/rooms/room_'+roomToken+'/players');
        roomRef.once('value', function(data){

            var lenref = Object.keys(data.val()).length;

            if(lenref<4){
                roomRef.child('player_'+countVal).set({name : username})
                    .then(function(){
                            countVal = countVal+1;
                            ref.update({tempCounter : countVal});
                            // res.redirect('/createroom/'+roomToken);
                            res.send(true);
                    })
                    .catch(function(err){
                        console.log(err);
                    });
            } else{
                res.send(false);
            };

        });
    })


});




app.post('/board/:id', (req, res) => {
    var player_pos = [req.body.player_1_pos,
    req.body.player_2_pos,
    req.body.player_3_pos,
    req.body.player_4_pos];

    var dice = req.body.dice_value;
    //id is the roomToken here
    var roomToken = req.params.id;
    var ref = firedb.ref('/rooms/room_' + roomToken + '/players');
    for (var i = 1; i <= 4; i++) {
        if (player_pos[i - 1] != null) {
            ref.child('player_' + i)
                .update({ position: player_pos[i - 1] }, function (error) {
                    if (error) {
                        res.send({ err: error });
                    } else {
                        res.send({ noerr: "writing successful" });
                    }
                });
        };
    };
    // console.log(dice);
    ref.update({ dice_value: dice }, function (error) {
        if (error) {
            res.send({ err: error });
        } else {
            res.send({ noerr: "writing successful" });
        }
    });


});

app.get('/board/:id', (req, res) => {
    var dice = models.diceRoll()
    res.send({ dice_value: dice })
})


module.exports = app;
